

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - data_pipeline_network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    networks:
      - data_pipeline_network

  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    environment:
      - CLUSTER_NAME=test
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    ports:
      - "9870:9870"
      - "8020:8020"
    networks:
      - data_pipeline_network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    depends_on:
      - namenode
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    networks:
      - data_pipeline_network

  spark-master:
    image: bitnami/spark:3
    container_name: spark-master
    restart: always
    environment:
      - SPARK_MODE=master
    volumes:
      - ./scripts:/opt/bitnami/spark/scripts
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - data_pipeline_network

  spark-worker:
    image: bitnami/spark:3
    container_name: spark-worker
    restart: always
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    ports:
      - "8081:8081"
    networks:
      - data_pipeline_network

  # Airflow 초기화를 담당하는 서비스 (DB 마이그레이션, 유저 생성)
  airflow-init:
    build: .
    container_name: airflow-init
    env_file:
      - .env
    volumes:
      - airflow_data:/opt/airflow
    entrypoint: /bin/bash
    command: -c "airflow db migrate && airflow users create --username admin --password admin --role Admin --email admin@example.com --firstname default --lastname user || true"
    restart: "no"

  # Airflow 웹서버 서비스
  airflow-webserver:
    build: .
    container_name: airflow-webserver
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./scripts:/opt/airflow/scripts # DAG에서 producer.py를 실행하기 위해 추가
      - airflow_data:/opt/airflow
      - /var/run/docker.sock:/var/run/docker.sock # docker exec 사용을 위해 필요
    ports:
      - "8082:8080"
    command: airflow webserver
    networks:
      - data_pipeline_network

  # Airflow 스케줄러 서비스
  airflow-scheduler:
    build: .
    container_name: airflow-scheduler
    restart: always
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - airflow_data:/opt/airflow
    command: airflow scheduler
    networks:
      - data_pipeline_network

  dashboard:
    build: .
    container_name: stock_dashboard
    networks:
      - data_pipeline_network
    restart: always
    volumes:
      - ./dashboard.py:/opt/airflow/dashboard.py
    ports:
      - "8503:8501"
    command: streamlit run /opt/airflow/dashboard.py --server.port 8501 --server.address 0.0.0.0

volumes:
  hadoop_namenode:
  hadoop_datanode:
  airflow_data:

networks:
  data_pipeline_network:
